# Inspired by Gilles Castel


# theorem things
# \newcommand*{\myproofname}{My proof}
# \newenvironment{myproof}[1][\myproofname]{\begin{proof}[#1]\renewcommand*{\qedsymbol}{\(\blacksquare\)}}{\end{proof}}


# \newtheorem{theorem}{Theorem}
# \newtheorem{claim}{Claim}[theorem]
# % ^ 1.1
# % \newtheorem{claim}[theorem]{Claim}
# % ^ 2
# \newenvironment{proof}{\emph{Proof.}}{\hfill $\square$}


snippet _article "Article Template" bA
\documentclass{article}

\usepackage{parskip}
\usepackage{amsmath}

\begin{document}
	$0
\end{document} 
endsnippet

snippet _pack "usepackage" bA
\usepackage{$1}$0
endsnippet 

snippet _beg "begin{} / end{}" bA
\begin{$1}$2
	$3
\end{$1} $0
endsnippet

snippet cx "Inline Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [';', ':', '\'', '/', '\\', '~', ',', '.', '?', '-', ' ', ')', '}', ']', ':']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet MK "Bold Inline Math" wA
$\mathbf{${1}}$`!p
if t[2] and t[2][0] not in [';',':', '\'', '/', '\\', '~', ',', '.', '?', '-', ' ', ')', '}', ']', ':']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

# LET PYTHON FIGURE OUT SPACES
snippet ml "Text in Math" wA
\text{$1} $0
endsnippet 

snippet dmm "Display Math" bA
\[
	$1
.\] $0
endsnippet 

snippet dmp "Display Math - comma (pause)" bA
\[
	$1
,\] $0
endsnippet 

snippet dmt "Display Math - blank (em(p)tee)" bA
\[
	$1
\] $0
endsnippet 

snippet '([^A-Za-z][A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '(^[A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([^A-Za-z][A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet '(^[A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet '\^(\d\d)' "auto superscript" wrA
^{`!p snip.rv = match.group(1)`}
endsnippet

# Fractions
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet 

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" irA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

# Limits
snippet *lim "Limit" wA
\\lim\\limits_{$1 \\to $2} $0
endsnippet 

snippet +lim "Infinite Limit" wA
\\lim\\limits_{$1 \\to \\infty} $0
endsnippet 

snippet -lim "Infinite Limit (Negative)" wA
\\lim\\limits_{$1 \\to -\\infty} $0
endsnippet 

# Sympy
snippet sympy "sympy block" w
sympy $1 sympy$0
endsnippet 

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, x, t = symbols('x y z t')
k, m, n = symbols('k m n', integer = True)
f, g, h = symbols('f g h', cls = Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
	.replace('^', '**') \
	.replace('{', '(') \
	.replace('}', ')') + ')')
`
endsnippet 

snippet \tbs "Text Backslash" wA
\textbackslash 
endsnippet 

snippet <= "less than or equal to" iA
\leq
endsnippet 

snippet >= "greater than or equal to" iA
\geq
endsnippet 

snippet tetand "text and" wA
\text{ and }
endsnippet 

snippet _fb "bold framebox" wA
\fbox{\textbf{$1}}$0
endsnippet 

snippet _QED "Tombstone" bA
%
\hfill $\square$ $0
endsnippet 

snippet _proof "thm environments preamble" bA
\newtheorem{theorem}{Theorem}
\newtheorem{lemma}[theorem]{Lemma}
\newtheorem{claim}{Claim}[theorem]
\newenvironment{proof}{\emph{Proof.}}{\hfill $\square$} $0
endsnippet 

# mathbb
snippet \R "reals" iA
\mathbb{R}$0
endsnippet 

snippet \Z "integers" iA
\mathbb{Z}$0
endsnippet 

snippet \N "naturals" iA
\mathbb{N}$0
endsnippet 

snippet \Q "rationals" iA
\mathbb{Q}$0
endsnippet 

snippet \P "power set" iA
\mathcal{P}$0
endsnippet 

snippet \a* "alpha" iA
\alpha$0
endsnippet 

snippet \b* "beta" iA
\beta$0
endsnippet 

snippet \g* "gamma" iA
\gamma$0
endsnippet 

snippet \d* "delta" iA
\delta$0
endsnippet 

snippet \e* "epsilon" iA
\epsilon$0
endsnippet 

snippet \l* "ell" iA
\ell$0
endsnippet 


# The Obsolete

# snippet '(\d+)\/(\d+)(\s)' "Automatic Fraction" wrA
# \frac{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}`!p snip.rv = match.group(3)`$0
# endsnippet 
# 
# snippet '(\d+)\/(\d+)' "Tabbed Fraction" wr
# \frac{`!p snip.rv = match.group(1)`}{`!p snip.rv = match.group(2)`}$0
# endsnippet 

# snippet ( "bracket" A
# ($1)$0
# endsnippet
